""" This module recieve attendance message from devices and send attendance to wfm """
""" manual-attendance-sync.py """

import os
import sys
import ast
import pika
import string
import random
import logging
import threading
import configparser
from pymongo import MongoClient
from module import alicloudDatabase
from module import connection
from module import alicloudAMQP
config_path = "/opt/innoflex/config/configfile.ini"
config_obj = configparser.ConfigParser()
config_obj.read(config_path)
infdatabase = config_obj["db"]
infcollection = config_obj["collection"]
infqueue = config_obj["queue"]
inftopic = config_obj["topic"]
inflog = config_obj["log"]
infetc = config_obj["etc"]
infamqp = config_obj["amqp"]
infroute = config_obj["route"]

dbUser = str(os.environ['DB_USER'])
dbPass = str(os.environ['DB_PASS'])

dbHost = "mongodb://"+str(infdatabase['nodes'])
dbReplicaSet = infdatabase['replicaSet']
dbClient = MongoClient(host=dbHost, replicaset=dbReplicaSet, username=dbUser,
                       password=dbPass, authSource='admin', authMechanism='SCRAM-SHA-256')

dbName = infdatabase['name']
devicetb = infcollection['devices']
attendancetb = infcollection['attendances']
blacklistlogtb = infcollection['blacklists']

queueName = infqueue['devicerec']
exchange = infamqp['exchange']

LOG_PATH = inflog['path']
THREADS = int(infetc['threadnum'])

loggers = {}

def setup_logger(name, log_file, level=logging.INFO):
    global loggers

    if loggers.get(name):
        return loggers.get(name)

    else:
        logger = logging.getLogger(name)
        logger.setLevel(logging.DEBUG)

        fileFormat = logging.Formatter(
            '{"timestamp":"%(asctime)s", "name": "%(name)s", "level": "%(levelname)s", "message": "%(message)s"}')
        fileHandler = logging.FileHandler(log_file)
        fileHandler.setFormatter(fileFormat)
        fileHandler.setLevel(level)
        logger.addHandler(fileHandler)

        streamFormat = logging.Formatter(
            '%(asctime)s %(name)s [%(levelname)s] %(message)s')
        streamHandler = logging.StreamHandler(sys.stdout)
        streamHandler.setFormatter(streamFormat)
        streamHandler.setLevel(logging.DEBUG)
        logger.addHandler(streamHandler)

        # reduce pika log level
        logging.getLogger("pika").setLevel(logging.WARNING)
        loggers[name] = logger

    return logger

def randomString(length):
        letters_and_digits = string.ascii_lowercase + string.digits
        result_str = ''.join(
            (random.choice(letters_and_digits) for i in range(length)))
        #logger.debug("Random alphanumeric String is:", result_str)
        return result_str

a = [["2022-11-23/18:59:49","1000031624","SSW","1930226"],
["2022-11-23/18:59:03","1000031801","SSW","1930226"],
["2022-11-23/18:59:01","1000031801","SSW","1930226"],
["2022-11-23/18:58:36","1000031819","SSW","1930226"],
["2022-11-23/18:58:34","1000031819","SSW","1930226"],
["2022-11-23/18:55:08","1000044796","SSW","1930226"],
["2022-11-23/18:55:06","1000044796","SSW","1930226"],
["2022-11-23/18:55:01","1000031963","SSW","1930226"],
["2022-11-23/18:55:00","1000031963","SSW","1930226"],
["2022-11-23/18:53:37","1000417719","SSW","1930226"],
["2022-11-23/18:53:35","1000417719","SSW","1930226"],
["2022-11-23/18:52:19","1000437623","SSW","1930226"],
["2022-11-23/18:52:17","1000437623","SSW","1930226"],
["2022-11-23/18:52:13","1000032619","SSW","1930226"],
["2022-11-23/18:52:12","1000032619","SSW","1930226"],
["2022-11-23/18:51:53","1000566269","SSW","1930226"],
["2022-11-23/18:51:52","1000566269","SSW","1930226"],
["2022-11-23/18:51:46","1000245341","SSW","1930226"],
["2022-11-23/18:51:03","1000200879","SSW","1930226"],
["2022-11-23/18:51:02","1000200879","SSW","1930226"],
["2022-11-23/18:50:21","1000208274","SSW","1930226"],
["2022-11-23/18:46:52","1000567510","SSW","1930226"],
["2022-11-23/18:43:52","1000566263","SSW","1930226"],
["2022-11-23/18:43:51","1000566263","SSW","1930226"],
["2022-11-23/18:37:04","1000383401","SSW","1930226"],
["2022-11-23/18:37:03","1000383401","SSW","1930226"],
["2022-11-23/18:22:39","1000341151","SSW","1930226"],
["2022-11-23/18:22:38","1000341151","SSW","1930226"],
["2022-11-23/18:20:24","1000262517","SSW","1930226"],
["2022-11-23/18:20:22","1000262517","SSW","1930226"],
["2022-11-23/18:17:51","1000167423","SSW","1930226"],
["2022-11-23/18:17:50","1000167423","SSW","1930226"],
["2022-11-23/18:17:18","1000164174","SSW","1930226"],
["2022-11-23/18:17:17","1000164174","SSW","1930226"],
["2022-11-23/18:16:36","1000207813","SSW","1930226"],
["2022-11-23/18:16:03","1000032599","SSW","1930226"],
["2022-11-23/18:15:48","1000279353","SSW","1930226"],
["2022-11-23/18:14:32","1000312963","SSW","1930226"],
["2022-11-23/18:14:31","1000312963","SSW","1930226"],
["2022-11-23/18:14:24","1000367077","SSW","1930226"],
["2022-11-23/18:12:41","1000032618","SSW","1930226"],
["2022-11-23/18:12:40","1000032618","SSW","1930226"],
["2022-11-23/18:12:38","1000032618","SSW","1930226"],
["2022-11-23/18:10:01","1000031574","SSW","1930226"],
["2022-11-23/18:10:00","1000031574","SSW","1930226"],
["2022-11-23/18:02:32","1000031919","SSW","1930226"],
["2022-11-23/18:02:30","1000031919","SSW","1930226"],
["2022-11-23/18:01:34","1000560804","SSW","1930226"],
["2022-11-23/18:01:32","1000560804","SSW","1930226"],
["2022-11-23/18:00:55","1000566276","SSW","1930226"],
["2022-11-23/18:00:54","1000566276","SSW","1930226"],
["2022-11-23/17:59:19","1000032585","SSW","1930226"],
["2022-11-23/17:58:51","1000031870","SSW","1930226"],
["2022-11-23/17:58:50","1000031870","SSW","1930226"],
["2022-11-23/17:58:49","1000044887","SSW","1930226"],
["2022-11-23/17:58:48","1000044887","SSW","1930226"],
["2022-11-23/17:58:33","1000185937","SSW","1930226"],
["2022-11-23/17:58:32","1000185937","SSW","1930226"],
["2022-11-23/17:57:42","1000429854","SSW","1930226"],
["2022-11-23/17:57:28","1000354110","SSW","1930226"],
["2022-11-23/17:57:12","1000302047","SSW","1930226"],
["2022-11-23/17:57:05","1000302047","SSW","1930226"],
["2022-11-23/17:57:02","1000302047","SSW","1930226"],
["2022-11-23/17:57:01","1000302047","SSW","1930226"],
["2022-11-23/17:56:59","1000302047","SSW","1930226"],
["2022-11-23/17:56:57","1000302047","SSW","1930226"],
["2022-11-23/17:56:52","1000031885","SSW","1930226"],
["2022-11-23/17:56:51","1000031885","SSW","1930226"],
["2022-11-23/17:56:47","1000032598","SSW","1930226"],
["2022-11-23/17:56:46","1000032598","SSW","1930226"],
["2022-11-23/17:56:39","1000357875","SSW","1930226"],
["2022-11-23/17:56:38","1000357875","SSW","1930226"],
["2022-11-23/17:56:30","1000340921","SSW","1930226"],
["2022-11-23/17:56:29","1000340921","SSW","1930226"],
["2022-11-23/17:56:28","1000314696","SSW","1930226"],
["2022-11-23/17:56:26","1000314696","SSW","1930226"],
["2022-11-23/17:55:55","1000220393","SSW","1930226"],
["2022-11-23/17:55:44","1000031902","SSW","1930226"],
["2022-11-23/17:55:35","1000369894","SSW","1930226"],
["2022-11-23/17:55:10","1000031741","SSW","1930226"],
["2022-11-23/17:55:06","1000044764","SSW","1930226"],
["2022-11-23/17:55:05","1000044764","SSW","1930226"],
["2022-11-23/17:55:00","1000487736","SSW","1930226"],
["2022-11-23/17:54:49","1000158394","SSW","1930226"],
["2022-11-23/17:54:40","1000208572","SSW","1930226"],
["2022-11-23/17:54:38","1000208572","SSW","1930226"],
["2022-11-23/17:54:17","1000186892","SSW","1930226"],
["2022-11-23/17:53:53","1000584681","SSW","1930226"],
["2022-11-23/17:52:53","1000031730","SSW","1930226"],
["2022-11-23/17:52:20","1000426014","SSW","1930226"],
["2022-11-23/17:52:19","1000426014","SSW","1930226"],
["2022-11-23/17:52:09","1000255734","SSW","1930226"],
["2022-11-23/17:52:08","1000255734","SSW","1930226"],
["2022-11-23/17:52:00","1000044790","SSW","1930226"],
["2022-11-23/17:51:59","1000044790","SSW","1930226"],
["2022-11-23/17:51:43","1000044624","SSW","1930226"],
["2022-11-23/17:51:03","1000158277","SSW","1930226"],
["2022-11-23/17:50:53","1000158279","SSW","1930226"],
["2022-11-23/17:50:25","1000559169","SSW","1930226"],
["2022-11-23/17:50:23","1000559169","SSW","1930226"],
["2022-11-23/17:50:05","1000145073","SSW","1930226"],
["2022-11-23/17:50:04","1000145073","SSW","1930226"],
["2022-11-23/17:49:08","1000044802","SSW","1930226"],
["2022-11-23/17:49:06","1000044802","SSW","1930226"],
["2022-11-23/17:49:02","1000031660","SSW","1930226"],
["2022-11-23/17:48:27","1000031784","SSW","1930226"],
["2022-11-23/17:48:26","1000031784","SSW","1930226"],
["2022-11-23/17:47:54","1000161387","SSW","1930226"],
["2022-11-23/17:46:25","1000045068","SSW","1930226"],
["2022-11-23/17:46:20","1000031743","SSW","1930226"],
["2022-11-23/17:46:19","1000031743","SSW","1930226"],
["2022-11-23/17:45:02","1000158165","SSW","1930226"],
["2022-11-23/17:45:00","1000511500","SSW","1930226"],
["2022-11-23/17:44:59","1000511500","SSW","1930226"],
["2022-11-23/17:44:58","1000031624","SSW","1930226"],
["2022-11-23/17:44:56","1000031624","SSW","1930226"],
["2022-11-23/17:44:48","1000031679","SSW","1930226"],
["2022-11-23/17:44:46","1000031679","SSW","1930226"],
["2022-11-23/17:43:18","1000184133","SSW","1930226"],
["2022-11-23/17:43:11","1000507390","SSW","1930226"],
["2022-11-23/17:43:10","1000507390","SSW","1930226"],
["2022-11-23/17:43:05","1000582635","SSW","1930226"],
["2022-11-23/17:42:57","1000224995","SSW","1930226"],
["2022-11-23/17:42:55","1000224995","SSW","1930226"],
["2022-11-23/17:41:51","1000212190","SSW","1930226"],
["2022-11-23/17:36:12","1000158163","SSW","1930226"],
["2022-11-23/17:36:10","1000158163","SSW","1930226"],
["2022-11-23/17:35:20","1000439362","SSW","1930226"],
["2022-11-23/17:35:19","1000439362","SSW","1930226"],
["2022-11-23/17:32:22","1000306881","SSW","1930226"],
["2022-11-23/17:32:21","1000306881","SSW","1930226"],
["2022-11-23/17:30:11","1000465545","SSW","1930226"],
["2022-11-23/17:30:09","1000465545","SSW","1930226"],
["2022-11-23/17:29:49","1000031991","SSW","1930226"],
["2022-11-23/17:29:48","1000031991","SSW","1930226"],
["2022-11-23/17:29:36","1000044902","SSW","1930226"],
["2022-11-23/17:26:48","1000475080","SSW","1930226"],
["2022-11-23/17:22:49","1000031562","SSW","1930226"],
["2022-11-23/17:22:48","1000031562","SSW","1930226"],
["2022-11-23/17:22:02","1000417353","SSW","1930226"],
["2022-11-23/17:21:49","1000031823","SSW","1930226"],
["2022-11-23/17:19:49","1000181622","SSW","1930226"],
["2022-11-23/17:19:47","1000181622","SSW","1930226"],
["2022-11-23/17:19:03","1000581425","SSW","1930226"],
["2022-11-23/17:19:02","1000581425","SSW","1930226"],
["2022-11-23/17:18:53","1000031593","SSW","1930226"],
["2022-11-23/17:18:52","1000031593","SSW","1930226"],
["2022-11-23/17:16:17","1000482536","SSW","1930226"],
["2022-11-23/17:16:16","1000482536","SSW","1930226"],
["2022-11-23/17:14:41","1000207813","SSW","1930226"],
["2022-11-23/17:14:40","1000207813","SSW","1930226"],
["2022-11-23/17:13:47","1000267693","SSW","1930226"],
["2022-11-23/17:13:46","1000267693","SSW","1930226"],
["2022-11-23/17:13:44","1000267693","SSW","1930226"],
["2022-11-23/17:13:20","1000158101","SSW","1930226"],
["2022-11-23/17:13:18","1000158101","SSW","1930226"],
["2022-11-23/17:09:32","1000581037","SSW","1930226"],
["2022-11-23/17:02:32","1000031819","SSW","1930226"],
["2022-11-23/16:59:06","1000281285","SSW","1930226"],
["2022-11-23/16:59:05","1000281285","SSW","1930226"],
["2022-11-23/16:58:18","1000032599","SSW","1930226"],
["2022-11-23/16:58:17","1000032599","SSW","1930226"],
["2022-11-23/16:58:13","1000032599","SSW","1930226"],
["2022-11-23/16:58:11","1000032599","SSW","1930226"],
["2022-11-23/16:57:38","1000031903","SSW","1930226"],
["2022-11-23/16:57:36","1000031903","SSW","1930226"],
["2022-11-23/16:57:28","1000425251","SSW","1930226"],
["2022-11-23/16:57:26","1000425251","SSW","1930226"],
["2022-11-23/16:57:06","1000414912","SSW","1930226"],
["2022-11-23/16:56:33","1000564040","SSW","1930226"],
["2022-11-23/16:56:32","1000564040","SSW","1930226"],
["2022-11-23/16:56:27","1000555537","SSW","1930226"],
["2022-11-23/16:56:22","1000462452","SSW","1930226"],
["2022-11-23/16:56:16","1000031744","SSW","1930226"],
["2022-11-23/16:55:01","1000031739","SSW","1930226"],
["2022-11-23/16:55:00","1000031739","SSW","1930226"],
["2022-11-23/16:54:24","1000044796","SSW","1930226"],
["2022-11-23/16:54:23","1000044796","SSW","1930226"],
["2022-11-23/16:53:27","1000031814","SSW","1930226"],
["2022-11-23/16:53:07","1000031801","SSW","1930226"],
["2022-11-23/16:52:44","1000031722","SSW","1930226"],
["2022-11-23/16:52:43","1000031722","SSW","1930226"],
["2022-11-23/16:52:34","1000031769","SSW","1930226"],
["2022-11-23/16:52:32","1000031769","SSW","1930226"],
["2022-11-23/16:52:28","1000031628","SSW","1930226"],
["2022-11-23/16:52:27","1000031628","SSW","1930226"],
["2022-11-23/16:51:08","1000581083","SSW","1930226"],
["2022-11-23/16:51:07","1000581083","SSW","1930226"],
["2022-11-23/16:48:24","1000031816","SSW","1930226"],
["2022-11-23/16:46:47","1000312218","SSW","1930226"],
["2022-11-23/16:46:46","1000312218","SSW","1930226"],
["2022-11-23/16:45:17","1000567363","SSW","1930226"],
["2022-11-23/16:45:16","1000567363","SSW","1930226"],
["2022-11-23/16:41:44","1000262517","SSW","1930226"],
["2022-11-23/16:41:43","1000262517","SSW","1930226"],
["2022-11-23/16:28:27","1000507390","SSW","1930226"],
["2022-11-23/16:28:26","1000507390","SSW","1930226"],
["2022-11-23/16:26:15","1000383401","SSW","1930226"],
["2022-11-23/16:21:50","1000245353","SSW","1930226"],
["2022-11-23/16:15:53","1000366454","SSW","1930226"],
["2022-11-23/16:15:51","1000366454","SSW","1930226"],
["2022-11-23/16:09:11","1000484762","SSW","1930226"],
["2022-11-23/16:09:10","1000484762","SSW","1930226"],
["2022-11-23/16:03:21","1000357528","SSW","1930226"],
["2022-11-23/16:03:20","1000357528","SSW","1930226"]]

try:
    facility = "SSW"
    d_type = "IN"
    
    for i in a :
        messageId = randomString(8)+"-"+randomString(4)+"-"+randomString(4)+"-"+randomString(4)+"-"+randomString(12)
    
        logname = 'AttendanceSync'+' ['+messageId+'] '
        logger = setup_logger(logname, LOG_PATH+"/"+"inf-attendance-sync.log")

        workerCode = i[1]
        time = i[0]
        deviceCode = i[3]
        attendanceDate = time.replace("/"," ")
        logger.debug("Timestamp : " + str(attendanceDate))
        logger.debug("messageId : "+messageId)
        logger.debug("deviceCode : "+deviceCode)
        logger.debug("workerCode : "+workerCode)
 

        syncAttendance_json = {
            "_id": messageId,
            "messageId": messageId,
            "operation": "SYNC_ATTENDANCE",
            "info": {
                "workerCode": workerCode,
                "deviceCode": deviceCode,
                "facility": facility,
                "attendanceDate": attendanceDate,
                "type": d_type
            }
        }

        logger.debug(syncAttendance_json)
        routing = exchange+"."+str(infroute['attendancesync'])
        queue = str(infqueue['attendancesync'])
        isqmqpSuccess = alicloudAMQP.amqpPublish(
            exchange, routing, syncAttendance_json, queue)
        isSuccess = alicloudDatabase.insertToDB(
            attendancetb, syncAttendance_json)

        log = {
            "data": syncAttendance_json,
            "tasks": {
                "amqp": {
                    "queue": queue,
                    "success": isqmqpSuccess
                },
                "database": {
                    "collection": attendancetb,
                    "success": isSuccess
                }
            }
        }

        logger.debug(
            "Insert attendance log success ? : " + str(isSuccess))

except Exception as e:
        logger.error(str(e))

